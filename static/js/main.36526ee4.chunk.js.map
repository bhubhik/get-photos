{"version":3,"sources":["components/photoPage.js","components/searchBar.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","gridList","width","Album","photos","classes","smallScreen","useMediaQuery","mediumScreen","className","length","sort","a","b","height","push","shift","GridList","cellHeight","cols","map","photo","index","GridListTile","src","urls","small","alt","alt_description","id","SearchBar","onSubmit","Input","disabled","Form","Field","Control","Label","useState","userInput","setUserInput","handleSubmit","e","preventDefault","type","placeholder","value","onChange","target","color","onClick","heroContent","backgroundColor","palette","background","paper","padding","spacing","App","setPhotos","loading","setLoading","errorMessage","setErrorMessage","handleSearch","axios","get","response","results","data","content","Container","maxWidth","Grid","container","item","xs","align","CircularProgress","Typography","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAIMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,SAChBC,SAAU,UAEZC,SAAU,CACRC,MAAO,SA6CIC,EAzCD,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACTC,EAAUZ,IACVa,EAAcC,YAAc,qBAC5BC,EAAeD,YAAc,sBAmCnC,OAAO,qBAAKE,UAAWJ,EAAQT,KAAxB,UAjCDQ,EAAOM,QAAU,IACnBN,EAAOO,MAAK,SAACC,EAAGC,GAAJ,OACVD,EAAEV,MAAQU,EAAEE,OAASD,EAAEX,MAAQW,EAAEC,QAC5B,EACDD,EAAEX,MAAQW,EAAEC,OAASF,EAAEV,MAAQW,EAAEC,OACjC,EACA,KAENV,EAAOW,KAAKX,EAAOY,UAGnB,cAACC,EAAA,EAAD,CACEC,WAAYZ,EAAc,OAAS,IACnCG,UAAWJ,EAAQJ,SACnBkB,KAAMb,EAAc,EAAIE,EAAe,EAAI,EAH7C,SAKGJ,EAAOgB,KAAI,SAACC,EAAOC,GAAR,OACV,cAACC,EAAA,EAAD,CAEEJ,KACGb,GACAE,GACU,IAAVc,GAAeA,IAAUlB,EAAOM,OAAS,EAEtC,EADA,EANR,SAUE,qBAAKc,IAAKH,EAAMI,KAAKC,MAAOC,IAAKN,EAAMO,mBATlCP,EAAMQ,a,QCHRC,EAhCG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SACXC,GADoC,EAAfC,SACYC,OAAjCF,OACR,GADyCE,OAA1BC,MAA0BD,OAAnBE,QAAmBF,OAAVG,MACGC,mBAAS,KAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAe,SAACC,GACpBA,EAAEC,iBACFZ,EAASQ,GACTC,EAAa,KAGf,OACE,sBAAK/B,UAAU,YAAf,UACE,sBAAMA,UAAU,aAAasB,SAAUU,EAAvC,SACE,qBAAKhC,UAAU,aAAf,SACE,cAACuB,EAAD,CACEvB,UAAU,SACVmC,KAAK,OACLC,YAAY,4CACZC,MAAOP,EACPQ,SAAU,SAACL,GAAD,OAAOF,EAAaE,EAAEM,OAAOF,cAI7C,qBAAKrC,UAAU,eAAf,SACE,cAAC,SAAD,CAAQwC,MAAM,UAAUxC,UAAU,aAAayC,QAAST,EAAxD,0BChBFhD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCwD,YAAa,CACXC,gBAAiBzD,EAAM0D,QAAQC,WAAWC,MAC1CC,QAAS7D,EAAM8D,QAAQ,EAAG,EAAG,QA8DlBC,MA3Df,WACE,IAAMrD,EAAUZ,IAChB,EAA4B6C,mBAAS,IAArC,mBAAOlC,EAAP,KAAeuD,EAAf,KACA,EAA8BrB,oBAAS,GAAvC,mBAAOsB,EAAP,KAAgBC,EAAhB,KACA,EAAwCvB,mBAAS,IAAjD,mBAAOwB,EAAP,KAAqBC,EAArB,KAGMC,EAAY,uCAAG,WAAOzB,GAAP,iBAAA3B,EAAA,6DACnBmD,EAAgB,IAChBF,GAAW,GAFQ,kBAIMI,IAAMC,IAAN,8DACkC3B,EADlC,sBANV,gDAEI,OAIX4B,EAJW,OAOXC,EAAUD,EAASE,KAAKD,QAC9BT,EAAUS,GACNA,EAAQ1D,OAAS,GACnBqD,EAAgB,6BAAD,OACgBxB,EADhB,iCAIjBsB,GAAW,GAdM,kDAgBjBA,GAAW,GACXE,EAAgB,GAAD,wEAjBE,0DAAH,sDAuBlB,OACE,iCACE,sBAAKtD,UAAWJ,EAAQiE,QAAxB,UACE,oBAAI7D,UAAU,eAAd,iDACA,cAAC8D,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACjB,QAAS,EAAzB,UACE,cAACgB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,MAAM,SAAzB,SACE,cAAC,EAAD,CAAW9C,SAAUiC,EAAc/B,SAAU2B,MAE9CA,GACC,cAACa,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,MAAM,SAAzB,SACE,cAACC,EAAA,EAAD,CAAkB7B,MAAM,gBAG3Ba,GACC,cAACW,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,MAAM,SAAzB,SACE,cAACE,EAAA,EAAD,CAAYC,QAAQ,QAAQ/B,MAAM,QAAQ4B,MAAM,SAAhD,SACGf,cAOb,cAAC,EAAD,CAAO1D,OAAQA,QC5DN6E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.36526ee4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { GridList, GridListTile, useMediaQuery } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'center',\r\n    overflow: 'hidden',\r\n  },\r\n  gridList: {\r\n    width: 950,\r\n  },\r\n}));\r\n\r\nconst Album = ({ photos }) => {\r\n  const classes = useStyles();\r\n  const smallScreen = useMediaQuery('(max-width:480px)');\r\n  const mediumScreen = useMediaQuery('(max-width; 768px)');\r\n  const photoGrid = () => {\r\n    if (photos.length >= 3) {\r\n      photos.sort((a, b) =>\r\n        a.width / a.height > b.width / b.height\r\n          ? -1\r\n          : b.width / b.height > a.width / b.height\r\n          ? 1\r\n          : 0\r\n      );\r\n      photos.push(photos.shift());\r\n    }\r\n    return (\r\n      <GridList\r\n        cellHeight={smallScreen ? 'auto' : 320}\r\n        className={classes.gridList}\r\n        cols={smallScreen ? 1 : mediumScreen ? 2 : 4}\r\n      >\r\n        {photos.map((photo, index) => (\r\n          <GridListTile\r\n            key={photo.id}\r\n            cols={\r\n              !smallScreen &&\r\n              !mediumScreen &&\r\n              (index === 0 || index === photos.length - 1)\r\n                ? 2\r\n                : 1\r\n            }\r\n          >\r\n            <img src={photo.urls.small} alt={photo.alt_description} />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    );\r\n  };\r\n  return <div className={classes.root}>{photoGrid()}</div>;\r\n};\r\n\r\nexport default Album;\r\n","import React, { useState } from 'react';\r\nimport { Button } from 'react-bulma-components';\r\nimport { Form } from 'react-bulma-components';\r\n\r\nconst SearchBar = ({ onSubmit, disabled }) => {\r\n  const { Input, Field, Control, Label } = Form;\r\n  const [userInput, setUserInput] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit(userInput);\r\n    setUserInput('');\r\n  };\r\n\r\n  return (\r\n    <div className='searchBox'>\r\n      <form className='searchForm' onSubmit={handleSubmit}>\r\n        <div className='searchText'>\r\n          <Input\r\n            className='input '\r\n            type='text'\r\n            placeholder='Type here the picture you are looking for'\r\n            value={userInput}\r\n            onChange={(e) => setUserInput(e.target.value)}\r\n          ></Input>\r\n        </div>\r\n      </form>\r\n      <div className='searchButton'>\r\n        <Button color='primary' className='button btn' onClick={handleSubmit}>\r\n          Search\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Container,\r\n  Grid,\r\n  CircularProgress,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport Album from './components/photoPage';\r\nimport SearchBar from './components/searchBar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n}));\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [photos, setPhotos] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const clientId = 'u-lTcsDUUDp4aeJaE6KWv__XdOWmqGBdO0WDNJBYhPc';\r\n\r\n  const handleSearch = async (userInput) => {\r\n    setErrorMessage('');\r\n    setLoading(true);\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.unsplash.com/search/photos?page=1&query=${userInput}&client_id=${clientId}`\r\n      );\r\n      const results = response.data.results;\r\n      setPhotos(results);\r\n      if (results.length < 1) {\r\n        setErrorMessage(\r\n          `Could not find photos for ${userInput}. Please try another search.`\r\n        );\r\n      }\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      setErrorMessage(\r\n        `${error}. Please contact the developer if this error continues.`\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <main>\r\n      <div className={classes.content}>\r\n        <h1 className='titleDisplay'>Look for the magic in every moment.</h1>\r\n        <Container maxWidth='sm'>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} align='center'>\r\n              <SearchBar onSubmit={handleSearch} disabled={loading} />\r\n            </Grid>\r\n            {loading && (\r\n              <Grid item xs={12} align='center'>\r\n                <CircularProgress color='secondary' />\r\n              </Grid>\r\n            )}\r\n            {errorMessage && (\r\n              <Grid item xs={12} align='center'>\r\n                <Typography variant='body1' color='error' align='center'>\r\n                  {errorMessage}\r\n                </Typography>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n      <Album photos={photos} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}